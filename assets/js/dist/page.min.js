/**
 * Reference: https://bootsnipp.com/snippets/featured/link-to-top-page
 */
$(function() {
    $(window).scroll(() => {
        if ($(this).scrollTop() > 50 &&
            $("#sidebar-trigger").css("display") === "none") {
            $("#back-to-top").fadeIn();
        } else {
            $("#back-to-top").fadeOut();
        }
    });

    $("#back-to-top").click(() => {
        $("body,html").animate({
            scrollTop: 0
        }, 800);
        return false;
    });
});

/**
 * Listener for theme mode toggle
 */
$(function () {
    $(".mode-toggle").click((e) => {
        const $target = $(e.target);
        let $btn = ($target.prop("tagName") === "button".toUpperCase() ?
            $target : $target.parent());

        $btn.blur(); // remove the clicking outline
        flipMode();
    });
});

/**
 * A tool for smooth scrolling and topbar switcher
 */
const ScrollHelper = (function () {
    const $body = $("body");
    const ATTR_TOPBAR_VISIBLE = "data-topbar-visible";
    const topbarHeight = $("#topbar-wrapper").outerHeight();

    let scrollUpCount = 0; // the number of times the scroll up was triggered by ToC or anchor
    let topbarLocked = false;
    let orientationLocked = false;

    return {
        hideTopbar: () => {
            $body.attr(ATTR_TOPBAR_VISIBLE, false)
        },
        showTopbar: () => {
            $body.attr(ATTR_TOPBAR_VISIBLE, true)
        },

        // scroll up

        addScrollUpTask: () => {
            console.log("addScrollUpTask")
            scrollUpCount += 1;
            if (!topbarLocked) {                
                topbarLocked = true;
            }
        },
        popScrollUpTask: () => { 
            scrollUpCount -= 1
        },
        hasScrollUpTask: () => scrollUpCount > 0,
        topbarLocked: () => topbarLocked === true,
        unlockTopbar: () => topbarLocked = false,
        getTopbarHeight: () => topbarHeight,

        // orientation change

        orientationLocked: () => orientationLocked === true,
        lockOrientation: () => orientationLocked = true,
        unLockOrientation: () => orientationLocked = false
    };

}());

/**
 * This script make #search-result-wrapper switch to unloaded or shown automatically.
 */

$(function () {
    const btnSbTrigger = $("#sidebar-trigger");
    const btnSearchTrigger = $("#search-trigger");
    const btnCancel = $("#search-cancel");
    const main = $("#main");
    const topbarTitle = $("#topbar-title");
    const searchWrapper = $("#search-wrapper");
    const resultWrapper = $("#search-result-wrapper");
    const results = $("#search-results");
    const input = $("#search-input");
    const hints = $("#search-hints");

    const scrollBlocker = (function () {
        let offset = 0;
        return {
            block() {
                offset = window.scrollY;
                $("html,body").scrollTop(0);
            },
            release() {
                $("html,body").scrollTop(offset);
            },
            getOffset() {
                return offset;
            }
        };
    }());

    /*--- Actions in mobile screens (Sidebar hidden) ---*/

    const mobileSearchBar = (function () {
        return {
            on() {
                btnSbTrigger.addClass("unloaded");
                topbarTitle.addClass("unloaded");
                btnSearchTrigger.addClass("unloaded");
                searchWrapper.addClass("d-flex");
                btnCancel.addClass("loaded");
            },
            off() {
                btnCancel.removeClass("loaded");
                searchWrapper.removeClass("d-flex");
                btnSbTrigger.removeClass("unloaded");
                topbarTitle.removeClass("unloaded");
                btnSearchTrigger.removeClass("unloaded");
            }
        };
    }());

    const resultSwitch = (function () {
        let visible = false;

        return {
            on() {
                if (!visible) {
                    // the block method must be called before $(#main) unloaded.
                    scrollBlocker.block();
                    resultWrapper.removeClass("unloaded");
                    main.addClass("unloaded");
                    visible = true;
                }
            },
            off() {
                if (visible) {
                    results.empty();
                    if (hints.hasClass("unloaded")) {
                        hints.removeClass("unloaded");
                    }
                    resultWrapper.addClass("unloaded");
                    main.removeClass("unloaded");

                    // now the release method must be called after $(#main) display
                    scrollBlocker.release();

                    input.val("");
                    visible = false;
                }
            },
            isVisible() {
                return visible;
            }
        };

    }());

    function isMobileView() {
        return btnCancel.hasClass("loaded");
    }

    btnSearchTrigger.click(function () {
        mobileSearchBar.on();
        resultSwitch.on();
        input.focus();
    });

    btnCancel.click(function () {
        mobileSearchBar.off();
        resultSwitch.off();
    });

    input.focus(function () {
        searchWrapper.addClass("input-focus");
    });

    input.focusout(function () {
        searchWrapper.removeClass("input-focus");
    });

    input.on("input", () => {
        if (input.val() === "") {
            if (isMobileView()) {
                hints.removeClass("unloaded");
            } else {
                resultSwitch.off();
            }

        } else {
            resultSwitch.on();
            if (isMobileView()) {
                hints.addClass("unloaded");
            }
        }
    });

});

/**
 * Expand or close the sidebar in mobile screens.
 */

$(function () {
    const sidebarUtil = (function () {
        const ATTR_DISPLAY = "sidebar-display";
        let isExpanded = false;
        const body = $("body");

        return {
            toggle() {
                if (isExpanded === false) {
                    body.attr(ATTR_DISPLAY, "");
                } else {
                    body.removeAttr(ATTR_DISPLAY);
                }

                isExpanded = !isExpanded;
            }
        };

    }());

    $("#sidebar-trigger").click(sidebarUtil.toggle);

    $("#mask").click(sidebarUtil.toggle);
});

/**
 * Initial Bootstrap Tooltip.
 */
$(function () {
    $("[data-toggle=\"tooltip\"]").tooltip();
});

/**
 * Hide Header on scroll down
 */

$(function () {
    const $searchInput = $("#search-input");
    const delta = ScrollHelper.getTopbarHeight();

    let didScroll;
    let lastScrollTop = 0;

    function hasScrolled() {
        let st = $(this).scrollTop();

        /* Make sure they scroll more than delta */
        if (Math.abs(lastScrollTop - st) <= delta) {
            return;
        }

        if (st > lastScrollTop) { // Scroll Down
            // nheidloff
            if (!document.getElementById('post-list'))
                ScrollHelper.hideTopbar();

            if ($searchInput.is(":focus")) {
                $searchInput.blur(); /* remove focus */
            }

        } else { // Scroll up
            // has not yet scrolled to the bottom of the screen, that is, there is still space for scrolling
            if (st + $(window).height() < $(document).height()) {

                if (ScrollHelper.hasScrollUpTask()) {
                    return;
                }

                if (ScrollHelper.topbarLocked()) { // avoid redundant scroll up event from smooth scrolling
                    ScrollHelper.unlockTopbar();
                } else {
                    if (ScrollHelper.orientationLocked()) { // avoid device auto scroll up on orientation change
                        ScrollHelper.unLockOrientation();
                    } else {
                        ScrollHelper.showTopbar();
                    }
                }
            }
        }

        lastScrollTop = st;

    } // hasScrolled()

    function handleLandscape() {
        if ($(window).scrollTop() === 0) {
            return;
        }
        ScrollHelper.lockOrientation();
        // nheidloff
        if (!document.getElementById('post-list'))
            ScrollHelper.hideTopbar();
    }

    if (screen.orientation) {
        screen.orientation.onchange = () => {
            const type = screen.orientation.type;
            if (type === "landscape-primary" || type === "landscape-secondary") {
                handleLandscape();
            }
        };

    } else {
        // for the browsers that not support `window.screen.orientation` API
        $(window).on("orientationchange", () => {
            if ($(window).width() < $(window).height()) { // before rotating, it is still in portrait mode.
                handleLandscape();
            }
        });
    }

    $(window).scroll(() => {
        if (didScroll) {
            return;
        }
        didScroll = true;
    });

    setInterval(() => {
        if (didScroll) {
            hasScrolled();
            didScroll = false;
        }
    }, 250);
});

/**
 * Top bar title auto change while scrolling up/down in mobile screens.
 */

$(function () {
    const titleSelector = "div.post>h1:first-of-type";
    const $pageTitle = $(titleSelector);
    const $topbarTitle = $("#topbar-title");

    if ($pageTitle.length === 0 /* on Home page */
        || $pageTitle.hasClass("dynamic-title")
        || $topbarTitle.is(":hidden")) {/* not in mobile views */
        return;
    }

    const defaultTitleText = $topbarTitle.text().trim();
    let pageTitleText = $pageTitle.text().trim();
    let hasScrolled = false;
    let lastScrollTop = 0;

    if ($("#page-category").length || $("#page-tag").length) {
        /* The title in Category or Tag page will be "<title> <count_of_posts>" */
        if (/\s/.test(pageTitleText)) {
            pageTitleText = pageTitleText.replace(/[0-9]/g, "").trim();
        }
    }

    // When the page is scrolled down and then refreshed, the topbar title needs to be initialized
    if ($pageTitle.offset().top < $(window).scrollTop()) {
        $topbarTitle.text(pageTitleText);
    }

    let options = {
        rootMargin: '-48px 0px 0px 0px', // 48px equals to the topbar height (3rem)
        threshold: [0, 1]
    };

    let observer = new IntersectionObserver((entries) => {
        if (!hasScrolled) {
            hasScrolled = true;
            return;
        }

        let curScrollTop = $(window).scrollTop();
        let isScrollDown = lastScrollTop < curScrollTop;
        lastScrollTop = curScrollTop;
        let heading = entries[0];

        if (isScrollDown) {
            if (heading.intersectionRatio === 0) {
                $topbarTitle.text(pageTitleText);
            }
        } else {
            if (heading.intersectionRatio === 1) {
                $topbarTitle.text(defaultTitleText);
            }
        }
    }, options);

    observer.observe(document.querySelector(titleSelector));

    /* Click title will scroll to top */
    $topbarTitle.click(function () {
        $("body,html").animate({scrollTop: 0}, 800);
    });

});

/**
 * Set up image stuff
 */

(function() {
    if ($('#core-wrapper img[data-src]') <= 0) {
        return;
    }

    /* See: <https://github.com/dimsemenov/Magnific-Popup> */
    $('.popup').magnificPopup({
        type: 'image',
        closeOnContentClick: true,
        showCloseBtn: false,
        zoom: {
            enabled: true,
            duration: 300,
            easing: 'ease-in-out'
        }
    });

    /* Stop shimmer when image loaded */
    document.addEventListener('lazyloaded', function(e) {
        const $img = $(e.target);
        $img.parent().removeClass('shimmer');
    });

})();

/**
 * Clipboard functions
 *
 * Dependencies:
 *   - popper.js (https://github.com/popperjs/popper-core)
 *   - clipboard.js (https://github.com/zenorocha/clipboard.js)
 */

$(function () {
    const btnSelector = '.code-header>button';
    const ICON_SUCCESS = 'fas fa-check';
    const ATTR_TIMEOUT = 'timeout';
    const ATTR_TITLE_SUCCEED = 'data-title-succeed';
    const ATTR_TITLE_ORIGIN = 'data-original-title';
    const TIMEOUT = 2000; // in milliseconds

    function isLocked(node) {
        if ($(node)[0].hasAttribute(ATTR_TIMEOUT)) {
            let timeout = $(node).attr(ATTR_TIMEOUT);
            if (Number(timeout) > Date.now()) {
                return true;
            }
        }
        return false;
    }

    function lock(node) {
        $(node).attr(ATTR_TIMEOUT, Date.now() + TIMEOUT);
    }

    function unlock(node) {
        $(node).removeAttr(ATTR_TIMEOUT);
    }

    /* --- Copy code block --- */

    // Initial the clipboard.js object
    const clipboard = new ClipboardJS(btnSelector, {
        target(trigger) {
            let codeBlock = trigger.parentNode.nextElementSibling;
            return codeBlock.querySelector('code .rouge-code');
        }
    });

    $(btnSelector).tooltip({
        trigger: 'hover',
        placement: 'left'
    });

    function getIcon(btn) {
        let iconNode = $(btn).children();
        return iconNode.attr('class');
    }

    const ICON_DEFAULT = getIcon(btnSelector);

    function showTooltip(btn) {
        const succeedTitle = $(btn).attr(ATTR_TITLE_SUCCEED);
        $(btn).attr(ATTR_TITLE_ORIGIN, succeedTitle).tooltip('show');
    }

    function hideTooltip(btn) {
        $(btn).tooltip('hide').removeAttr(ATTR_TITLE_ORIGIN);
    }

    function setSuccessIcon(btn) {
        let btnNode = $(btn);
        let iconNode = btnNode.children();
        iconNode.attr('class', ICON_SUCCESS);
    }

    function resumeIcon(btn) {
        let btnNode = $(btn);
        let iconNode = btnNode.children();
        iconNode.attr('class', ICON_DEFAULT);
    }

    clipboard.on('success', (e) => {
        e.clearSelection();

        const trigger = e.trigger;
        if (isLocked(trigger)) {
            return;
        }

        setSuccessIcon(trigger);
        showTooltip(trigger);
        lock(trigger);

        setTimeout(() => {
            hideTooltip(trigger);
            resumeIcon(trigger);
            unlock(trigger);
        }, TIMEOUT);

    });

    /* --- Post link sharing --- */

    $('#copy-link').click((e) => {

        let target = $(e.target);

        if (isLocked(target)) {
            return;
        }

        // Copy URL to clipboard

        const url = window.location.href;
        const $temp = $("<input>");

        $("body").append($temp);
        $temp.val(url).select();
        document.execCommand("copy");
        $temp.remove();

        // Switch tooltip title

        const defaultTitle = target.attr(ATTR_TITLE_ORIGIN);
        const succeedTitle = target.attr(ATTR_TITLE_SUCCEED);

        target.attr(ATTR_TITLE_ORIGIN, succeedTitle).tooltip('show');
        lock(target);

        setTimeout(() => {
            target.attr(ATTR_TITLE_ORIGIN, defaultTitle);
            unlock(target);
        }, TIMEOUT);

    });

});

/**
 Safari doesn't support CSS `scroll-behavior: smooth`,
 so here is a compatible solution for all browser to smooth scrolling

 See: <https://css-tricks.com/snippets/jquery/smooth-scrolling/>

 Warning: It must be called after all `<a>` tags (e.g., the dynamic TOC) are ready.
 */

$(function () {
    const $topbarTitle = $("#topbar-title");
    const REM = 16; // in pixels
    const ATTR_SCROLL_FOCUS = "scroll-focus";

    $("a[href*='#']")
        .not("[href='#']")
        .not("[href='#0']")
        .click(function (event) {
            if (this.pathname.replace(/^\//, "") !==
                location.pathname.replace(/^\//, "")) {
                return;
            }

            if (location.hostname !== this.hostname) {
                return;
            }

            const hash = decodeURI(this.hash);
            let toFootnoteRef = RegExp(/^#fnref:/).test(hash);
            let toFootnote = toFootnoteRef ? false : RegExp(/^#fn:/).test(hash);
            let selector = hash.includes(":") ? hash.replace(/:/g, "\\:") : hash;
            let $target = $(selector);

            let isMobileViews = $topbarTitle.is(":visible");
            let isPortrait = $(window).width() < $(window).height();

            if (typeof $target === "undefined") {
                return;
            }

            event.preventDefault();

            if (history.pushState) { /* add hash to URL */
                history.pushState(null, null, hash);
            }

            let curOffset = $(window).scrollTop();
            let destOffset = $target.offset().top -= REM / 2;

            if (destOffset < curOffset) { // scroll up
                // nheidloff
                if (!document.getElementById('post-list'))
                    ScrollHelper.hideTopbar();                
                ScrollHelper.addScrollUpTask();

                if (isMobileViews && isPortrait) {
                    destOffset -= ScrollHelper.getTopbarHeight();
                }

            } else { // scroll down
                if (isMobileViews && isPortrait) {
                    destOffset -= ScrollHelper.getTopbarHeight();
                }
            }

            $("html").animate({
                scrollTop: destOffset
            }, 500, () => {
                $target.focus();

                /* clean up old scroll mark */
                if ($(`[${ATTR_SCROLL_FOCUS}=true]`).length) {
                    $(`[${ATTR_SCROLL_FOCUS}=true]`).attr(ATTR_SCROLL_FOCUS, false);
                }

                /* Clean :target links */
                if ($(":target").length) { /* element that visited by the URL with hash */
                    $(":target").attr(ATTR_SCROLL_FOCUS, false);
                }

                /* set scroll mark to footnotes */
                if (toFootnote || toFootnoteRef) {
                    $target.attr(ATTR_SCROLL_FOCUS, true);
                }

                if ($target.is(":focus")) { /* Checking if the target was focused */
                    return false;
                } else {
                    $target.attr("tabindex", "-1"); /* Adding tabindex for elements not focusable */
                    $target.focus(); /* Set focus again */
                }

                if (ScrollHelper.hasScrollUpTask()) {
                    ScrollHelper.popScrollUpTask();
                }
            });
        }); /* click() */
});
